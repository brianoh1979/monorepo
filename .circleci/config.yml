version: 2.1

jobs:
  build:
    docker:
      - image: circleci/openjdk:8
    steps:
      - checkout
      - run:
          name: Trigger build for modified projects
          shell: /bin/bash
          command: tools/ci/core/build.sh

  server:
    docker:
      - image: cimg/openjdk:19.0.2
    working_directory: ~/project/apps/server
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Build Server
          command: ./gradlew build

  client:
    docker:
      - image: cimg/openjdk:19.0.2
    working_directory: ~/project/apps/client
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Build Client
          command: ./gradlew build        

  common:
    docker:
      - image: cimg/openjdk:19.0.2
    working_directory: ~/project/libs/common
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Build Common
          command: ./gradlew build      

  logging:
    docker:
      - image: cimg/openjdk:19.0.2
    working_directory: ~/project/libs/logging
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Build Logging
          command: ./gradlew build      

  gradle-versioning-plugin:
    docker:
      - image: circleci/openjdk:8
    working_directory: ~/project/tools/gradle-plugins/gradle-versioning-plugin
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Build Gradle Versioning Plugin
          command: ./gradlew build   

  test:
    # Remove if parallelism is not desired
    parallelism: 2
    environment:
      # Configure the JVM and Gradle to avoid OOM errors
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    docker:
      - image: circleci/openjdk:11.0.3-jdk-stretch
      - image: cimg/postgres:11.18-postgis
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: circle_test
    resource_class: xlarge
    steps:
      - checkout
      - run: mkdir build
      - run: mkdir build/test-results
      - run: mkdir build/test-results/test
      - run:
          name: Run tests in parallel
          # Use "./gradlew test" instead if tests are not run in parallel
          command: |
            cd src/test/java
            # Get list of classnames of tests that should run on this node
            CLASSNAMES=$(circleci tests glob "**/*.java" \
              | cut -c 1- | sed 's@/@.@g' \
              | sed 's/.\{5\}$//' \
              | circleci tests split --split-by=timings --timings-type=classname)
            cd ../../..
            # Format the arguments to "./gradlew test"
            GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print "--tests",$i}')
            echo "Prepared arguments for Gradle: $GRADLE_ARGS"
            (
            ./gradlew test $GRADLE_ARGS
            ) || {
              if [ $? -ne 0 ]; then
                ./gradlew test $GRADLE_ARGS || true
              fi  
            }
#      - run:
#          name: Generate code coverage report
#          command:
#            ./gradlew jacocoTestReport
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/test-results
          when: always
      - store_artifacts:
          path: build/reports/jacoco/test/html
          when: always
#      - run:
#          name: Assemble JAR
#          command: |
#            # Skip this for other nodes
#            if [ "$CIRCLE_NODE_INDEX" == 0 ]; then
#              ./gradlew assemble
#            fi
      # This will be empty for all nodes except the first one
      - store_artifacts:
          path: build/libs
 #     - run: 
 #         name: set workflow to 0 status
 #         command: |
 #           ./deploy.sh


workflows:
    build-test-deploy:
        jobs:
#            - gradle-versioning-plugin
             - test
#                  requires:
#                      - gradle-versioning-plugin
